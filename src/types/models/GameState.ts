/* tslint:disable */
/* eslint-disable */
/**
 * Bodoge API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GameLogicState } from './GameLogicState';
import {
    GameLogicStateFromJSON,
    GameLogicStateFromJSONTyped,
    GameLogicStateToJSON,
    GameLogicStateToJSONTyped,
} from './GameLogicState';
import type { GamePhase } from './GamePhase';
import {
    GamePhaseFromJSON,
    GamePhaseFromJSONTyped,
    GamePhaseToJSON,
    GamePhaseToJSONTyped,
} from './GamePhase';

/**
 * 
 * @export
 * @interface GameState
 */
export interface GameState {
    /**
     * 
     * @type {string}
     * @memberof GameState
     */
    versionId: string;
    /**
     * 
     * @type {string}
     * @memberof GameState
     */
    name: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GameState
     */
    playerIds: Array<string>;
    /**
     * 
     * @type {GamePhase}
     * @memberof GameState
     */
    phase: GamePhase;
    /**
     * 
     * @type {number}
     * @memberof GameState
     */
    numberOfPlayers: number;
    /**
     * 
     * @type {GameLogicState}
     * @memberof GameState
     */
    gameLogicState: GameLogicState;
}



/**
 * Check if a given object implements the GameState interface.
 */
export function instanceOfGameState(value: object): value is GameState {
    if (!('versionId' in value) || value['versionId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('playerIds' in value) || value['playerIds'] === undefined) return false;
    if (!('phase' in value) || value['phase'] === undefined) return false;
    if (!('numberOfPlayers' in value) || value['numberOfPlayers'] === undefined) return false;
    if (!('gameLogicState' in value) || value['gameLogicState'] === undefined) return false;
    return true;
}

export function GameStateFromJSON(json: any): GameState {
    return GameStateFromJSONTyped(json, false);
}

export function GameStateFromJSONTyped(json: any, ignoreDiscriminator: boolean): GameState {
    if (json == null) {
        return json;
    }
    return {
        
        'versionId': json['versionId'],
        'name': json['name'],
        'playerIds': json['playerIds'],
        'phase': GamePhaseFromJSON(json['phase']),
        'numberOfPlayers': json['numberOfPlayers'],
        'gameLogicState': GameLogicStateFromJSON(json['gameLogicState']),
    };
}

  export function GameStateToJSON(json: any): GameState {
      return GameStateToJSONTyped(json, false);
  }

  export function GameStateToJSONTyped(value?: GameState | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'versionId': value['versionId'],
        'name': value['name'],
        'playerIds': value['playerIds'],
        'phase': GamePhaseToJSON(value['phase']),
        'numberOfPlayers': value['numberOfPlayers'],
        'gameLogicState': GameLogicStateToJSON(value['gameLogicState']),
    };
}

