/* tslint:disable */
/* eslint-disable */
/**
 * Bodoge API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BannedChara } from './BannedChara';
import {
    BannedCharaFromJSON,
    BannedCharaFromJSONTyped,
    BannedCharaToJSON,
    BannedCharaToJSONTyped,
} from './BannedChara';
import type { Player } from './Player';
import {
    PlayerFromJSON,
    PlayerFromJSONTyped,
    PlayerToJSON,
    PlayerToJSONTyped,
} from './Player';
import type { Chat } from './Chat';
import {
    ChatFromJSON,
    ChatFromJSONTyped,
    ChatToJSON,
    ChatToJSONTyped,
} from './Chat';
import type { Environment } from './Environment';
import {
    EnvironmentFromJSON,
    EnvironmentFromJSONTyped,
    EnvironmentToJSON,
    EnvironmentToJSONTyped,
} from './Environment';
import type { UIStateCode } from './UIStateCode';
import {
    UIStateCodeFromJSON,
    UIStateCodeFromJSONTyped,
    UIStateCodeToJSON,
    UIStateCodeToJSONTyped,
} from './UIStateCode';
import type { Card } from './Card';
import {
    CardFromJSON,
    CardFromJSONTyped,
    CardToJSON,
    CardToJSONTyped,
} from './Card';

/**
 * 
 * @export
 * @interface GameLogicState
 */
export interface GameLogicState {
    /**
     * 
     * @type {Array<Card>}
     * @memberof GameLogicState
     */
    deck: Array<Card>;
    /**
     * 
     * @type {string}
     * @memberof GameLogicState
     */
    turnPlayerId: string;
    /**
     * 
     * @type {number}
     * @memberof GameLogicState
     */
    turnNumber: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof GameLogicState
     */
    orderedPlayerIds: Array<string>;
    /**
     * 
     * @type {Array<Player>}
     * @memberof GameLogicState
     */
    players: Array<Player>;
    /**
     * 
     * @type {Environment}
     * @memberof GameLogicState
     */
    environment: Environment;
    /**
     * 
     * @type {boolean}
     * @memberof GameLogicState
     */
    isRevolving: boolean;
    /**
     * 
     * @type {{ [key: string]: UIStateCode; }}
     * @memberof GameLogicState
     */
    forClient: { [key: string]: UIStateCode; };
    /**
     * 
     * @type {Array<Chat>}
     * @memberof GameLogicState
     */
    chatHistory: Array<Chat>;
    /**
     * 
     * @type {number}
     * @memberof GameLogicState
     */
    skipCount: number;
    /**
     * 
     * @type {Array<BannedChara>}
     * @memberof GameLogicState
     */
    bannedChara: Array<BannedChara>;
    /**
     * 
     * @type {{ [key: string]: Array<Card>; }}
     * @memberof GameLogicState
     */
    loopSnapShot: { [key: string]: Array<Card>; };
    /**
     * 
     * @type {boolean}
     * @memberof GameLogicState
     */
    isNoAction: boolean;
    /**
     * 
     * @type {number}
     * @memberof GameLogicState
     */
    andoAbilityCount: number;
    /**
     * 
     * @type {boolean}
     * @memberof GameLogicState
     */
    isBoon: boolean;
    /**
     * 
     * @type {number}
     * @memberof GameLogicState
     */
    readyCount: number;
}

/**
 * Check if a given object implements the GameLogicState interface.
 */
export function instanceOfGameLogicState(value: object): value is GameLogicState {
    if (!('deck' in value) || value['deck'] === undefined) return false;
    if (!('turnPlayerId' in value) || value['turnPlayerId'] === undefined) return false;
    if (!('turnNumber' in value) || value['turnNumber'] === undefined) return false;
    if (!('orderedPlayerIds' in value) || value['orderedPlayerIds'] === undefined) return false;
    if (!('players' in value) || value['players'] === undefined) return false;
    if (!('environment' in value) || value['environment'] === undefined) return false;
    if (!('isRevolving' in value) || value['isRevolving'] === undefined) return false;
    if (!('forClient' in value) || value['forClient'] === undefined) return false;
    if (!('chatHistory' in value) || value['chatHistory'] === undefined) return false;
    if (!('skipCount' in value) || value['skipCount'] === undefined) return false;
    if (!('bannedChara' in value) || value['bannedChara'] === undefined) return false;
    if (!('loopSnapShot' in value) || value['loopSnapShot'] === undefined) return false;
    if (!('isNoAction' in value) || value['isNoAction'] === undefined) return false;
    if (!('andoAbilityCount' in value) || value['andoAbilityCount'] === undefined) return false;
    if (!('isBoon' in value) || value['isBoon'] === undefined) return false;
    if (!('readyCount' in value) || value['readyCount'] === undefined) return false;
    return true;
}

export function GameLogicStateFromJSON(json: any): GameLogicState {
    return GameLogicStateFromJSONTyped(json, false);
}

export function GameLogicStateFromJSONTyped(json: any, ignoreDiscriminator: boolean): GameLogicState {
    if (json == null) {
        return json;
    }
    return {
        
        'deck': ((json['deck'] as Array<any>).map(CardFromJSON)),
        'turnPlayerId': json['turnPlayerId'],
        'turnNumber': json['turnNumber'],
        'orderedPlayerIds': json['orderedPlayerIds'],
        'players': ((json['players'] as Array<any>).map(PlayerFromJSON)),
        'environment': EnvironmentFromJSON(json['environment']),
        'isRevolving': json['isRevolving'],
        'forClient': (mapValues(json['forClient'], UIStateCodeFromJSON)),
        'chatHistory': ((json['chatHistory'] as Array<any>).map(ChatFromJSON)),
        'skipCount': json['skipCount'],
        'bannedChara': ((json['bannedChara'] as Array<any>).map(BannedCharaFromJSON)),
        'loopSnapShot': json['loopSnapShot'],
        'isNoAction': json['isNoAction'],
        'andoAbilityCount': json['andoAbilityCount'],
        'isBoon': json['isBoon'],
        'readyCount': json['readyCount'],
    };
}

  export function GameLogicStateToJSON(json: any): GameLogicState {
      return GameLogicStateToJSONTyped(json, false);
  }

  export function GameLogicStateToJSONTyped(value?: GameLogicState | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'deck': ((value['deck'] as Array<any>).map(CardToJSON)),
        'turnPlayerId': value['turnPlayerId'],
        'turnNumber': value['turnNumber'],
        'orderedPlayerIds': value['orderedPlayerIds'],
        'players': ((value['players'] as Array<any>).map(PlayerToJSON)),
        'environment': EnvironmentToJSON(value['environment']),
        'isRevolving': value['isRevolving'],
        'forClient': (mapValues(value['forClient'], UIStateCodeToJSON)),
        'chatHistory': ((value['chatHistory'] as Array<any>).map(ChatToJSON)),
        'skipCount': value['skipCount'],
        'bannedChara': ((value['bannedChara'] as Array<any>).map(BannedCharaToJSON)),
        'loopSnapShot': value['loopSnapShot'],
        'isNoAction': value['isNoAction'],
        'andoAbilityCount': value['andoAbilityCount'],
        'isBoon': value['isBoon'],
        'readyCount': value['readyCount'],
    };
}

