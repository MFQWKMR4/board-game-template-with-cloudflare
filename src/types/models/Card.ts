/* tslint:disable */
/* eslint-disable */
/**
 * Bodoge API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ToPlay } from './ToPlay';
import {
    ToPlayFromJSON,
    ToPlayFromJSONTyped,
    ToPlayToJSON,
    ToPlayToJSONTyped,
} from './ToPlay';

/**
 * 
 * @export
 * @interface Card
 */
export interface Card {
    /**
     * The unique identifier of the card.
     * @type {string}
     * @memberof Card
     */
    id: string;
    /**
     * The original character symbol on the card.
     * @type {string}
     * @memberof Card
     */
    originalChara: string;
    /**
     * The character representation used during the game.
     * @type {string}
     * @memberof Card
     */
    chara: string;
    /**
     * Numeric value associated with the card.
     * @type {number}
     * @memberof Card
     */
    value: number;
    /**
     * 
     * @type {Array<ToPlay>}
     * @memberof Card
     */
    conditionsToPlay: Array<ToPlay>;
}

/**
 * Check if a given object implements the Card interface.
 */
export function instanceOfCard(value: object): value is Card {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('originalChara' in value) || value['originalChara'] === undefined) return false;
    if (!('chara' in value) || value['chara'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    if (!('conditionsToPlay' in value) || value['conditionsToPlay'] === undefined) return false;
    return true;
}

export function CardFromJSON(json: any): Card {
    return CardFromJSONTyped(json, false);
}

export function CardFromJSONTyped(json: any, ignoreDiscriminator: boolean): Card {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'originalChara': json['originalChara'],
        'chara': json['chara'],
        'value': json['value'],
        'conditionsToPlay': ((json['conditionsToPlay'] as Array<any>).map(ToPlayFromJSON)),
    };
}

  export function CardToJSON(json: any): Card {
      return CardToJSONTyped(json, false);
  }

  export function CardToJSONTyped(value?: Card | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'originalChara': value['originalChara'],
        'chara': value['chara'],
        'value': value['value'],
        'conditionsToPlay': ((value['conditionsToPlay'] as Array<any>).map(ToPlayToJSON)),
    };
}

