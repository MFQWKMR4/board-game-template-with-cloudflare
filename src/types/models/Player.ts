/* tslint:disable */
/* eslint-disable */
/**
 * Bodoge API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Card } from './Card';
import {
    CardFromJSON,
    CardFromJSONTyped,
    CardToJSON,
    CardToJSONTyped,
} from './Card';

/**
 * 
 * @export
 * @interface Player
 */
export interface Player {
    /**
     * The unique identifier of the player.
     * @type {string}
     * @memberof Player
     */
    playerId: string;
    /**
     * The name of the player, e.g., John Doe.
     * @type {string}
     * @memberof Player
     */
    name: string;
    /**
     * The personality assigned to the player, such as ando, ueno, bale.
     * @type {string}
     * @memberof Player
     */
    personality: PlayerPersonalityEnum;
    /**
     * The current state of the player, e.g., normal or ready.
     * @type {string}
     * @memberof Player
     */
    state: PlayerStateEnum;
    /**
     * List of cards currently held by the player.
     * @type {Array<Card>}
     * @memberof Player
     */
    hands: Array<Card>;
    /**
     * The number of cards currently held by the player.
     * @type {number}
     * @memberof Player
     */
    handsCount: number;
    /**
     * Flag indicating whether the player should skip their turn.
     * @type {boolean}
     * @memberof Player
     */
    toSkip: boolean;
    /**
     * Flag indicating whether the player can receive a card.
     * @type {boolean}
     * @memberof Player
     */
    cannotReceiveCard: boolean;
    /**
     * The power of the player.
     * @type {number}
     * @memberof Player
     */
    power: number;
}


/**
 * @export
 */
export const PlayerPersonalityEnum = {
    Ando: 'ando',
    Ueno: 'ueno',
    Abe: 'abe',
    Bale: 'bale',
    None: 'NONE'
} as const;
export type PlayerPersonalityEnum = typeof PlayerPersonalityEnum[keyof typeof PlayerPersonalityEnum];

/**
 * @export
 */
export const PlayerStateEnum = {
    Normal: 'normal',
    Ready: 'ready'
} as const;
export type PlayerStateEnum = typeof PlayerStateEnum[keyof typeof PlayerStateEnum];


/**
 * Check if a given object implements the Player interface.
 */
export function instanceOfPlayer(value: object): value is Player {
    if (!('playerId' in value) || value['playerId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('personality' in value) || value['personality'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('hands' in value) || value['hands'] === undefined) return false;
    if (!('handsCount' in value) || value['handsCount'] === undefined) return false;
    if (!('toSkip' in value) || value['toSkip'] === undefined) return false;
    if (!('cannotReceiveCard' in value) || value['cannotReceiveCard'] === undefined) return false;
    if (!('power' in value) || value['power'] === undefined) return false;
    return true;
}

export function PlayerFromJSON(json: any): Player {
    return PlayerFromJSONTyped(json, false);
}

export function PlayerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Player {
    if (json == null) {
        return json;
    }
    return {
        
        'playerId': json['playerId'],
        'name': json['name'],
        'personality': json['personality'],
        'state': json['state'],
        'hands': ((json['hands'] as Array<any>).map(CardFromJSON)),
        'handsCount': json['handsCount'],
        'toSkip': json['toSkip'],
        'cannotReceiveCard': json['cannotReceiveCard'],
        'power': json['power'],
    };
}

  export function PlayerToJSON(json: any): Player {
      return PlayerToJSONTyped(json, false);
  }

  export function PlayerToJSONTyped(value?: Player | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'playerId': value['playerId'],
        'name': value['name'],
        'personality': value['personality'],
        'state': value['state'],
        'hands': ((value['hands'] as Array<any>).map(CardToJSON)),
        'handsCount': value['handsCount'],
        'toSkip': value['toSkip'],
        'cannotReceiveCard': value['cannotReceiveCard'],
        'power': value['power'],
    };
}

