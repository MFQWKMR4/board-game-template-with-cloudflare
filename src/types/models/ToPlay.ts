/* tslint:disable */
/* eslint-disable */
/**
 * Bodoge API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PlayReason } from './PlayReason';
import {
    PlayReasonFromJSON,
    PlayReasonFromJSONTyped,
    PlayReasonToJSON,
    PlayReasonToJSONTyped,
} from './PlayReason';

/**
 * 
 * @export
 * @interface ToPlay
 */
export interface ToPlay {
    /**
     * The character representation used during the game.
     * @type {string}
     * @memberof ToPlay
     */
    chara: string;
    /**
     * Flag indicating whether the card can be played.
     * @type {boolean}
     * @memberof ToPlay
     */
    isAbleToPlay: boolean;
    /**
     * List of reasons why the card cannot be played.
     * @type {Array<PlayReason>}
     * @memberof ToPlay
     */
    reasons?: Array<PlayReason>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ToPlay
     */
    previousCharas?: Array<string>;
}

/**
 * Check if a given object implements the ToPlay interface.
 */
export function instanceOfToPlay(value: object): value is ToPlay {
    if (!('chara' in value) || value['chara'] === undefined) return false;
    if (!('isAbleToPlay' in value) || value['isAbleToPlay'] === undefined) return false;
    return true;
}

export function ToPlayFromJSON(json: any): ToPlay {
    return ToPlayFromJSONTyped(json, false);
}

export function ToPlayFromJSONTyped(json: any, ignoreDiscriminator: boolean): ToPlay {
    if (json == null) {
        return json;
    }
    return {
        
        'chara': json['chara'],
        'isAbleToPlay': json['isAbleToPlay'],
        'reasons': json['reasons'] == null ? undefined : ((json['reasons'] as Array<any>).map(PlayReasonFromJSON)),
        'previousCharas': json['previousCharas'] == null ? undefined : json['previousCharas'],
    };
}

  export function ToPlayToJSON(json: any): ToPlay {
      return ToPlayToJSONTyped(json, false);
  }

  export function ToPlayToJSONTyped(value?: ToPlay | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'chara': value['chara'],
        'isAbleToPlay': value['isAbleToPlay'],
        'reasons': value['reasons'] == null ? undefined : ((value['reasons'] as Array<any>).map(PlayReasonToJSON)),
        'previousCharas': value['previousCharas'],
    };
}

