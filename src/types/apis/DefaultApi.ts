/* tslint:disable */
/* eslint-disable */
/**
 * Bodoge API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateRoomRequest,
  CreateRoomResponse,
  Dummy200Response,
  JoinRoomRequest,
  JoinRoomResponse,
  RegisterRequest,
  RegisterResponse,
} from '../models/index';
import {
    CreateRoomRequestFromJSON,
    CreateRoomRequestToJSON,
    CreateRoomResponseFromJSON,
    CreateRoomResponseToJSON,
    Dummy200ResponseFromJSON,
    Dummy200ResponseToJSON,
    JoinRoomRequestFromJSON,
    JoinRoomRequestToJSON,
    JoinRoomResponseFromJSON,
    JoinRoomResponseToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    RegisterResponseFromJSON,
    RegisterResponseToJSON,
} from '../models/index';

export interface CreateRoomOperationRequest {
    createRoomRequest: CreateRoomRequest;
}

export interface JoinRoomOperationRequest {
    joinRoomRequest: JoinRoomRequest;
}

export interface RegisterOperationRequest {
    registerRequest: RegisterRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * create a room
     */
    async createRoomRaw(requestParameters: CreateRoomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateRoomResponse>> {
        if (requestParameters['createRoomRequest'] == null) {
            throw new runtime.RequiredError(
                'createRoomRequest',
                'Required parameter "createRoomRequest" was null or undefined when calling createRoom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRoomRequestToJSON(requestParameters['createRoomRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateRoomResponseFromJSON(jsonValue));
    }

    /**
     * create a room
     */
    async createRoom(requestParameters: CreateRoomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateRoomResponse> {
        const response = await this.createRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * dummy endpoint
     */
    async dummyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dummy200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dummy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Dummy200ResponseFromJSON(jsonValue));
    }

    /**
     * dummy endpoint
     */
    async dummy(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dummy200Response> {
        const response = await this.dummyRaw(initOverrides);
        return await response.value();
    }

    /**
     * join a room
     */
    async joinRoomRaw(requestParameters: JoinRoomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JoinRoomResponse>> {
        if (requestParameters['joinRoomRequest'] == null) {
            throw new runtime.RequiredError(
                'joinRoomRequest',
                'Required parameter "joinRoomRequest" was null or undefined when calling joinRoom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/join`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JoinRoomRequestToJSON(requestParameters['joinRoomRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JoinRoomResponseFromJSON(jsonValue));
    }

    /**
     * join a room
     */
    async joinRoom(requestParameters: JoinRoomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JoinRoomResponse> {
        const response = await this.joinRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * register a user
     */
    async registerRaw(requestParameters: RegisterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterResponse>> {
        if (requestParameters['registerRequest'] == null) {
            throw new runtime.RequiredError(
                'registerRequest',
                'Required parameter "registerRequest" was null or undefined when calling register().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters['registerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterResponseFromJSON(jsonValue));
    }

    /**
     * register a user
     */
    async register(requestParameters: RegisterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterResponse> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
